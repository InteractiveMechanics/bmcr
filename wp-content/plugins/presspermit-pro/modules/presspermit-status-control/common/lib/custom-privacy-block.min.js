"use strict";

/**
 * ------------------------------------------------------------------------------
 * Based on Edit Flow
 * Author: Daniel Bachhuber, Scott Bressler, Mohammad Jangda, Automattic, and
 * others
 * Copyright (c) 2009-2019 Mohammad Jangda, Daniel Bachhuber, et al.
 * ------------------------------------------------------------------------------
 */
var __ = wp.i18n.__;
var PluginPostStatusInfo = wp.editPost.PluginPostStatusInfo;
var registerPlugin = wp.plugins.registerPlugin;
var _wp$data = wp.data,
    withSelect = _wp$data.withSelect,
    withDispatch = _wp$data.withDispatch;
var compose = wp.compose.compose;
var SelectControl = wp.components.SelectControl;
/**
 * Map Custom Statuses as options for SelectControl
 */

var privacyStatuses = window.PPCustomPrivacy.statuses.map(function (s) {
  return {
    label: s.name,
    value: s.slug
  };
});

var getPrivacyLabel = function getPrivacyLabel(slug) {
  var item = privacyStatuses.find(function (s) {
    return s.value === slug;
  });

  if (item) {
    return item.label;
  }

  return '';
}; // return label only for published / private statuses

/**
 * Hack :(
 *
 * @see https://github.com/WordPress/gutenberg/issues/3144
 *
 * @param status
 */

var sideEffectL10nPrivacyManipulation = function sideEffectL10nPrivacyManipulation(status) {
  setTimeout(function () {
    var privacyLabel = getPrivacyLabel(status);
    var node = document.querySelector('.editor-post-save-draft');
    var storedStatus = wp.data.select('core/editor').getCurrentPostAttribute('status');

    if (!node) {
      node = document.querySelector('.editor-post-switch-to-draft');
    }

    if (PPCustomPrivacy.forceVisibility) {
      if ('publish' == PPCustomPrivacy.forceVisibility) {
        $('input.editor-post-visibility__dialog-radio[value="private"]').prop('disabled','disabled');
        $('input.editor-post-visibility__dialog-radio[value="public"]').prop('disabled',false);
      } else {
        $('input.editor-post-visibility__dialog-radio[value="private"]').prop('disabled',false);
        $('input.editor-post-visibility__dialog-radio[value="public"]').prop('disabled','disabled');
      }
    }

    //if (! $('div.publishpress-extended-post-privacy:visible').length || ('future' == status )) {
      if (!PPCustomPrivacy.forceVisibility) {
        if (('future' != status ) && window.PPCustomPrivacy.defaultPrivacy && getPrivacyLabel(window.PPCustomPrivacy.defaultPrivacy) && (! getPrivacyLabel(storedStatus) || 'draft' == storedStatus )) {
          $('input.editor-post-visibility__dialog-radio[value="private"]').prop('checked','checked');
          $('input.editor-post-visibility__dialog-radio[value="public"]').prop('disabled','disabled');
          $('button.edit-post-post-visibility__toggle').html(getPrivacyLabel(window.PPCustomPrivacy.defaultPrivacy));
          
          $('span.editor-post-publish-panel__link:first').html(getPrivacyLabel(window.PPCustomPrivacy.defaultPrivacy));
        } else {
          $('button.edit-post-post-visibility__toggle').html(__('Public'));
          $('input.editor-post-visibility__dialog-radio[value="public"]').prop('disabled', false);
          $('input.editor-post-visibility__dialog-radio[value="public"]').prop('checked','checked');

          $('span.editor-post-publish-panel__link:first').html(__('Public'));
        }
      }

      if('future'==status) {
        return;
      }
    //}

    if (node) {
      if (status !== 'draft') {
        if (status === 'publish') {
          if (storedStatus == status) {
            document.querySelector('.editor-post-save-draft, .editor-post-switch-to-draft').innerText = __('Switch to Draft');
          } else {
            document.querySelector('.editor-post-save-draft, .editor-post-switch-to-draft').innerText = '';
          }
          $('button.edit-post-post-visibility__toggle').html(__('Public'));
          $('input.editor-post-visibility__dialog-radio[value="public"]').prop('checked','checked');
          node.dataset.ppPrivacyInnerTextUpdated = true;
        } else {
          if (privacyLabel) {
            $('button.edit-post-post-visibility__toggle').html(privacyLabel);
            $('input.editor-post-visibility__dialog-radio[value="private"]').prop('checked','checked');

            document.querySelector('.editor-post-save-draft, .editor-post-switch-to-draft').innerText = "".concat(__('Save as'), " ").concat(privacyLabel);
            node.dataset.ppPrivacyInnerTextUpdated = true;
          }
        }
      }
    }
  }, 100);
};

/**
 * Hack :(
 * We need an interval because the DOM element is removed by autosave and rendered back after finishing.
 *
 * @see https://github.com/WordPress/gutenberg/issues/3144
 */
setInterval(function () {
  sideEffectL10nPrivacyManipulation(wp.data.select('core/editor').getEditedPostAttribute('status'));
}, 250);

var HideButtonsInterval = '';

var InitPublishButtonInterval = setInterval(function(){
  status = wp.data.select('core/editor').getCurrentPostAttribute('status');
  if (status != 'undefined') {
    clearInterval(InitPublishButtonInterval);

    if (getPrivacyLabel(status) && ['publish', 'private', 'draft', 'future'].indexOf(status) == -1 ) {
      HideButtonsInterval = setInterval(function(){
        $('button.editor-post-publish-button, button.editor-post-publish-panel__toggle').hide();
      }, 250);

      sideEffectL10nPrivacyManipulation(wp.data.select('core/editor').getEditedPostAttribute('status'));
    }
  }
}, 100);

$(document).on('click', 'div.publishpress-extended-post-privacy select', function() {
  var setStatus = $('div.publishpress-extended-post-privacy select').val();
  var storedStatus = wp.data.select('core/editor').getCurrentPostAttribute('status');

  clearInterval(HideButtonsInterval);

  if (['publish', 'draft', 'future'].indexOf(setStatus) === -1 || ('private'==setStatus && 'private' != storedStatus )) {
    $('#inspector-checkbox-control-1').attr('disabled','disabled');

    HideButtonsInterval = setInterval(function(){
      $('button.editor-post-publish-button, button.editor-post-publish-panel__toggle').hide();
    }, 50);
  } else {
    clearInterval(HideButtonsInterval);
    $('button.editor-post-publish-button, button.editor-post-publish-panel__toggle').show();
    
    if ('draft'==setStatus) {
      $('#inspector-checkbox-control-1').removeAttr('disabled');
    }
  }

  if (['publish', 'private', 'future'].indexOf(storedStatus) !== -1 
  && ['publish', 'draft', 'future'].indexOf(setStatus) === -1) {
    var selector = 'div.publishpress-extended-post-privacy select, button.editor-post-save-draft, .editor-post-save-draft, .editor-post-switch-to-draft';

    if (storedStatus != setStatus ) {
      $(selector).attr('disabled', 'disabled');

      var intDisableSave = setInterval(function(){
        $(selector).attr('disabled', 'disabled');
      }, 50);

      var data = {
        'pp_ajax_set_privacy': setStatus,
        'post_id': wp.data.select('core/editor').getCurrentPostId()
      };

      $.post(window.PPCustomPrivacy.ajaxUrl, data, function () {
        wp.data.dispatch('core/editor').refreshPost();

        clearInterval(intDisableSave);
        $(selector).removeAttr('disabled');

        setTimeout(function(){
          sideEffectL10nPrivacyManipulation(setStatus);
        }, 500);
      });
    }
  }  
});


$(document).on('click', 'button.editor-post-publish-button', function() {
  var publishInterval = setInterval(function() {
    if (wp.data.select('core/editor').isSavingPost()) {

      var publishCompleteInterval = setInterval(function() {
        if (!wp.data.select('core/editor').isSavingPost()) {

          clearInterval(publishCompleteInterval);
          $('div.editor-post-publish-panel__prepublish span.editor-post-publish-panel__link:first').closest('div.components-panel__body').hide();

        }
      }, 50);

      clearInterval(publishInterval);
    }
  }, 50);
});

$(document).on('click', 'button.editor-post-save-draft, button.editor-post-switch-to-draft', function() {
  var storedStatus = wp.data.select('core/editor').getCurrentPostAttribute('status');
  var savingDraft = false;

  if ($('div.publishpress-extended-post-privacy select').val() == 'draft' || storedStatus == 'publish' || storedStatus == 'private') {
    if(!$('div.publishpress-extended-post-status select:visible').length || $('div.publishpress-extended-post-status select').val() == 'draft') {
      savingDraft = true;
      
      $('div.publishpress-extended-post-privacy select').val('draft');

      $('div.publishpress-extended-post-status').addClass('pp-saving-draft'); // @todo: remove this workaround / safeguard?
    }
  }
      var saveDraftInterval = setInterval(function() {
        if (wp.data.select('core/editor').isSavingPost()) {

          var saveDraftCompleteInterval = setInterval(function() {
            if (!wp.data.select('core/editor').isSavingPost()) {
              clearInterval(saveDraftCompleteInterval);

              if (savingDraft) {
                // force Post Status UI to be regenerated
                wp.data.dispatch('core/editor').editPost({status: storedStatus});
                wp.data.dispatch('core/editor').editPost({status: 'draft'});

                $('div.publishpress-extended-post-status').removeClass('pp-saving-draft');
              }

              wp.data.dispatch('core/editor').refreshPost();
            }
          }, 250);

          clearInterval(saveDraftInterval);
        }
      }, 50);
});

$(document).on('click', 'input.editor-post-visibility__dialog-radio[value="private"]', function() {
  setTimeout(function() {
    $('div.edit-post-post-visibility__dialog').hide();
  }, 500);
});

/**
 * Custom status component
 * @param object props
 */
var PPCustomPostPrivacyInfo = function PPCustomPostPrivacyInfo(_ref) {
  var onUpdate = _ref.onUpdate,
      status = _ref.status;

  let listStatuses = privacyStatuses;

  
  var force = wp.data.select('core/editor').getCurrentPostAttribute('pp_force_visibility');
  var forceDefault;
  
  if (!force && PPCustomPrivacy.forceVisibility) {
    //if (!getPrivacyLabel(status)) {
      force = PPCustomPrivacy.forceVisibility;
      forceDefault = true;
    //}
  }

  if (force) {
    listStatuses = [];
    var i=0;
    $(privacyStatuses).each(function(s){
      if (-1 !== [force, 'draft'].indexOf(this.value)) {
        listStatuses[i]=this;
        i = i +1;
      }
    });
  }

  return React.createElement(PluginPostStatusInfo, {
    className: "publishpress-extended-post-privacy publishpress-extended-post-privacy-".concat(status)
  }, 
  React.createElement("h4", null, __('Visibility', 'publishpress')), 
  getPrivacyLabel(status) && 'draft' != status ? React.createElement(SelectControl, {
    label: "",
    value: status,
    options: listStatuses,
    onChange: onUpdate
  }) : __('(Unpublished)'), 
  React.createElement("small", {
    className: "publishpress-extended-post-privacy-note"
  }, forceDefault ? __('Visibility is locked by default settings.', 'presspermit') : force ? __('Visibility is locked by parent page setting.','presspermit'): getPrivacyLabel(status) && -1 == ['publish', 'draft'].indexOf(status) ? __("This will override all status settings above.", 'publishpress') : __('To select a custom visibility, first privately publish the post.')));
};

var plugin = compose(withSelect(function (select) {
  return {
    status: select('core/editor').getEditedPostAttribute('status')
  };
}), withDispatch(function (dispatch) {
  return {
    onUpdate: function onUpdate(status) {
      dispatch('core/editor').editPost({
        status: status
      });
      sideEffectL10nPrivacyManipulation(status);
    }
  };
}))(PPCustomPostPrivacyInfo);
registerPlugin('publishpress-custom-privacy-block', {
  icon: 'admin-site',
  render: plugin
});